vacuum:
  - platform: xiaomi_miio
    name: Rocky
    host: !secret rocky_local_ip
    token: !secret rocky_token

###########################################################
# Bin status
###########################################################

binary_sensor:
  - platform: template
    sensors:
      # The vacuum cleaner has multiple states that indicate that the device is running...
      # Unfortunately not all of them mark them as 'on', so we need to create our own 'on' state.
      # Optional: Do not show this helping sensor in your frotend
      rocky_running:
        value_template: >-
          {{ state_attr('vacuum.rocky', 'status') | default('charging', True) | lower in ['cleaning'] }}
      # Logic that marks the bin as full
      rocky_bin_full:
        # Cleaning time is greater equal to x hours
        value_template: >-
          {{ states('counter.rocky_running_time') | int >= (8 * 60) }}

counter:
  rocky_running_time:
    initial: 0
    step: 1

input_datetime:
  rocky_last_bin_cleaning:
    name: Last bin cleaning
    has_date: true
    has_time: true

script:
  # Shortcut to set the last cleaning time to now()
  rocky_set_bin_clean:
    sequence:
      - service: counter.reset
        entity_id: counter.rocky_running_time
      - service: input_datetime.set_datetime
        data_template:
          entity_id: input_datetime.rocky_last_bin_cleaning
          date: "{{ now().strftime('%Y-%m-%d') }}"
          time: '{{ now().strftime("%H:%M:00") }}'

sensor:
  - platform: template
    sensors:
      rocky_running_time:
        value_template: >
            {% set ct = states('counter.rocky_running_time') | int %}
            {% if ct > 60 %}{{ ct // 60 }}:{{ '{:0>2d}'.format(ct%60) }} hours{% else %}{{ct}} minutes{% endif %}
      rocky_last_bin_cleaning:
        friendly_name: Last bin cleaning
        icon_template: mdi:calendar-clock
        device_class: timestamp
        value_template: >-
          {{ states.input_datetime.rocky_last_bin_cleaning.state[:10] }}T{{ states.input_datetime.rocky_last_bin_cleaning.state[11:] }}+02:00

###########################################################
# Notifications
###########################################################

alert:
  # Does the actual alerting when the device's bin is full based
  # on the rule of binary_sensor.rocky_bin_full
  rocky_bin_full:
    name: 'Rocky''s stomach is full'
    done_message: 'Rocky is hungry again...'
    entity_id: binary_sensor.rocky_bin_full
    state: 'on'
    repeat: 720  # Renotify every 12h
    can_acknowledge: False
    skip_first: False
    notifiers:
      - all

###########################################################
# Automatic startup in the night
###########################################################

input_boolean:
  rocky_nightly_run:
    name: Nightly run
    icon: mdi:weather-night
  rocky_battery_alert:

# We need this to be a switch to "behave" this correctly in the ui
switch:
  - platform: template
    switches:
      rocky_nightly_run:
        value_template: "{{ is_state('input_boolean.rocky_nightly_run', 'on') }}"
        icon_template: mdi:weather-night
        turn_on:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.rocky_nightly_run
        turn_off:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.rocky_nightly_run

automation:
  - alias: "rocky: Reset Nightly Run"
    initial_state: True
    trigger:
      platform: time
      at: '06:00:00'
    action:
      service: input_boolean.turn_off
      entity_id: input_boolean.rocky_nightly_run
  - alias: "Rocky: Run nightly"
    trigger:
      # Run two times to make sure everything is cleaned up well
      - platform: time
        at: '02:30:00'
    condition:
      - condition: state
        entity_id: input_boolean.rocky_nightly_run
        state: 'on'
      # Not already running
      - condition: state
        entity_id: binary_sensor.rocky_running
        state: 'off'
      # Make sure battery is in good shape
      - condition: template
        value_template: "{{ state_attr('vacuum.rocky', 'battery_level')|default(100, True)|int >= 80 }}"
    action:
      - service: vacuum.start
        entity_id: vacuum.rocky
  - alias: 'Rocky: Increment counter when running'
    initial_state: True
    trigger:
      - platform: time_pattern
        minutes: '/1'
        seconds: 0
    condition:
      condition: state
      entity_id: binary_sensor.rocky_running
      state: 'on'
    action:
      - service: counter.increment
        entity_id: counter.rocky_running_time
  - alias: "Rocky: Send Nightly run actionable notification"
    trigger:
      - platform: time
        at: '21:00:00'
    condition:
      - condition: state
        entity_id: binary_sensor.somebody_home
        state: 'on'
      - condition: state
        entity_id: input_boolean.rocky_nightly_run
        state: 'off'
    action:
      service: notify.dennis
      data:
        title: "Rocky: Nightly run"
        message: "No nightly run enabled. Enable it?"
        data:
          push:
            category: "vacuum_nightly_run"
          action_data:
            entity_id: input_boolean.rocky_nightly_run
  - alias: "Rocky: Handle Nightly run actionable notification"
    trigger:
      platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: VACUUM_NIGHTLY_RUN_ON
    action:
      service: homeassistant.turn_on
      data_template:
        entity_id: '{{ trigger.actionData.entity_id }}'
